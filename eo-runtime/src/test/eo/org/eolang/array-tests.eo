# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+package org.eolang
+alias org.eolang.txt.sprintf
+alias org.eolang.io.stdout
+junit

[] > makes-array-through-special-syntax
  eq. > @
    2
    (* 1 2).length

[] > gets-lengths-of-empty-array-through-special-syntax
  eq. > @
    0
    *.length

[] > iterates-with-each
  *
    "one"
    "two"
    "three"
  .each > @
    [i] (stdout i > @)

[] > simple-mapping-int-to-string
  eq. > @
    length.
      map.
        * 1 2 3
        [i]
          i.as-string > @
    3

[] > using-map-as-object
  eq. > @
    " ".joined
      map.
        * 1 2
        [i]
          i.as-string > @
    "1 2"

# check that an empty array's .length equals to zero
[] > empty-array-length
  [elements...] > arr
  eq. > @
    0
    (arr).elements.length

# check that array.length works properly for non-empty arrays
[] > non-empty-array-length-test
  [elements...] > arr
  eq. > @
    5
    (arr "a" "b" "c" "d" "e").elements.length

# if map does mutate arrays, then this test would fail
# because of the absence of the as-int attribute
# that is caused by mutation of the original string array
# to an int array
[] > map-does-dot-mutate-array
  [numbers...] > squares
    map. > @
      numbers
      [current]
        pow. > @
          current.as-int
          2
  (squares "1" "2" "3") > sq
  eq. > @
    (sprintf "%d %d %d" 1 4 9)
    (sprintf "%d %d %d" (sq.get 0) (sq.get 1) (sq.get 2))

# this test performs mapping of array using the index for it
[] > mapi-index-can-be-accessed
  [numbers...] > multipliedByNaturalSequence
    mapi. > @
      numbers
      [current index]
        mul. > @
          current.as-int
          index.add 1
  (multipliedByNaturalSequence "1" "2" "3") > mulSeq
  eq. > @
    (sprintf "%d %d %d" 1 4 9)
    (sprintf "%d %d %d" (mulSeq.get 0) (mulSeq.get 1) (mulSeq.get 2))

[] > array-as-a-bound-attribute-size-0
  * > anArray
  0.eq (anArray.length) > @

[] > array-as-a-bound-attribute-size-1
  * > anArray
    100
  ((anArray.get 0).eq 100) > @

[] > array-as-a-bound-attribute-size-2
  * > anArray
    1
    2
  ((anArray.get 0).eq 1).and ((anArray.get 1).eq 2) > @

# check that array.is-empty works properly
[] > should-not-be-empty
  * > xs
    1
    2
  xs.is-empty.not > @

# check that array.is-empty works properly
[] > should-be-empty
  * > xs
  xs.is-empty > @
