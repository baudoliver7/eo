# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+package org.eolang.gray
+alias org.eolang.gray.cage
+junit

[] > writes-into-cage
  [z] > a
  cage > x
  and. > @
    x.write
      a 7
    x.z.eq 7

[] > avoid-infinite-loop
  cage > x
  x' > copy
  seq > @
    x.write 42
    copy.<
    x.write (7.add copy)
    x.eq 49

[] > avoid-infinite-loop-second-case
  [first second] > pair
  [head tail] > add
    pair head tail > @
  cage > list
  list' > copy
  seq > @
    list.write (pair 1 0)
    copy.<
    list.write (add 2 copy)
    list.second.second.eq 0

[] > cage-nested-objects
  cage > c
  c' > copy
  [x] > dummy
    x > @
  seq > @
    c.write (dummy 42)
    copy.<
    c.write (dummy copy)
    c.x.x.eq 42

[] > overwrites-caged-object-with-integer
  cage > c
  [] > t
    42 > attr
  seq > @
    c.write t
    c.attr
    c.write 66
    c.eq 66

[] > dataizes-encaged-object-lazily-first
  cage > x
  cage > sum
  seq > @
    x.write 42
    sum.write (x.add 1)
    x.write 7
    sum.eq 8

[] > dataizes-encaged-object-lazily-second
  cage > x
  cage > sum
  seq > @
    x.write 42
    sum.write (1.add x)
    x.write 7
    sum.eq 8

[] > dataizes-encaged-object-lazily-third
  cage > x
  cage > y
  cage > sum
  seq > @
    x.write 42
    y.write 7
    sum.write (x.add y)
    y.write 13
    x.write 4
    sum.eq 17
