# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+package org.eolang
+alias org.eolang.txt.sprintf
+alias org.eolang.gray.cage
+junit

[] > understands-this-correctly
  [x] > a
    $.x > @
  eq. > @
    a 42
    42

[] > takes-parent-object
  [x] > a
    [] > take
      ^.x > @
    take > @
  eq. > @
    a 42
    42

[] > makes-object-a-constant
  [] > foo
    as-int. > @
      mul.
        random
        100.0
  foo.@ > f!
  f.eq f > @

[] > kids-are-accessible-in-const-object
  [] > a
    [] > hello
      42 > @
  a > b!
  eq. > @
    42
    b.hello

[] > takes-parent-through-attribute
  42 > x
  $ > this
  [] > @
    [] > @
      [] > @
        eq. > @
          42
          this.x

[] > throws-when-applies-to-closed-object
  [x] > a
    x > @
  a FALSE > closed
  closed TRUE > @

# [] > makes-deep-object-recursively
#   eq. > @
#     0
#     x 10
#   [i] > x
#     if. > @
#       i.less 0
#       0
#       x
#         i.sub 1

[] > iterates-over-sigma
  memory > x
  seq > @
    x.write TRUE
    eq.
      1
      x.while
        [i]
          &.x.write FALSE > @

[] > calculates-only-once-BROKEN
  memory > x
  [] > a
    seq > @
      x.write (x.add 1)
      42
  seq > @
    x.write 0
    a.neg.neg.neg.neg.eq 42
    x.eq 1

[] > rho-of-add-should-not-change
  memory > f1
  cage > f2
  memory > f0
  seq > @
    f0.write 0
    f1.write 1
    f2.write ((f0).add (f1))
    f1.write f2
    TRUE

[] > positive-object-vertices
  and. > @
    42.<.eq (42.<)
    "Hello".<.eq ("Hello".<)
    42.add.<.greater 0
    45-1F-E7.<.eq (45-1F-E7.<)

[] > negative-object-vertices
  [x] > a
  not. > @
    or.
      (2.add 3).<.eq (5.<)
      42.<.eq (42.0.<)
      45-1F-E8.<.eq (45-1F-E8-83.<)
      (a 5).<.eq ((a 5).<)
      (* 1 2 3).<.eq ((* 1 2 3).<)

[] > recursion-without-arguments
  memory > n
  [] > func
    if. > @
      n.greater 0
      seq
        n.write (n.sub 1)
        ^.func
        TRUE
      TRUE
  seq > @
    n.write 4
    func

[] > creates-vararg-from-variable-array
  * "Jeff" 42 > a
  eq. > @
    "Hello, Jeff, are you 42?"
    sprintf
      "Hello, %s, are you %d?"
      ...a

[] > creates-vararg-from-array
  eq. > @
    "Hello, Jeff, are you 42?"
    sprintf
      "Hello, %s, are you %d?"
      ...* "Jeff" 42

[] > returns-same-object
  [] > foo
    [] > @
      memory > x
  eq. > @
    foo.x.<
    foo.x.<

[] > compiles-correctly-with-long-duplicate-names
  [] > long-object-name
    [] > long-object-name
      [] > long-object-name
        [] > long-object-name
          [] > long-object-name
  TRUE > @

[] > refers-to-inner-vars-correctly
  memory > go
  seq > @
    go.write TRUE
    go.while
      [i]
        memory > m
        seq > @
          42 > x
          m.write x
          go.write FALSE
    TRUE

[] > named-inner-abstract-object
  [] > @
    seq > @
      [] > a
        TRUE > @

[] > calling-caged-function
  cage > h
  [x] > func
    sprintf "Hello, %s!" x > @
  eq. > @
    "Hello, Jeff!"
    seq
      h.write func
      h.@ "Jeff"

[] > app-that-calls-varargs-function
  [] > app
    [args...] > f
      1 > a
      2 > @
    (f 1 2 3).eq 2 > @
  app > output
  output.eq TRUE > @
