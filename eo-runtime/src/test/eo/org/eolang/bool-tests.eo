# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+package org.eolang
+alias org.eolang.io.stdout
+alias org.eolang.txt.sprintf
+junit

[] > compares-two-bools
  eq. > @
    TRUE
    TRUE

[] > compares-two-different-types
  not. > @
    eq.
      TRUE
      42

[] > joins-many-ANDs
  and. > @
    TRUE
    5.less 10
    4.greater -6
    TRUE
    0.eq 0

[] > forks-on-condition
  eq. > @
    42
    if.
      5.eq 8
      123
      42

[] > iterates-over-simple-counter
  memory > x
  and. > @
    x.write 5
    eq.
      4
      while.
        x.less 10
        [i]
          ^.^.^ > x
          x.write (x.add i) > @

[] > prints-nice-formulas
  memory > x
  seq > @
    x.write 2
    while.
      x.less 6
      [i]
        ^.^.^ > x
        seq > @
          stdout
            sprintf "%dx%d = %d\n" x x (x.pow 2)
          x.write (x.add 1)
    TRUE

# tests that bool.and stops calculations if its i'th
# object is false (including the base object)
[] > and-short-circuiting
  memory > mFirst
  memory > mThird
  and. > @
    not.
      and.
        (mFirst.write 1).not
        mFirst.write 2
        mFirst.write 3
    not.
      and.
        mThird.write 1
        mThird.write 2
        (mThird.write 3).not
        (mThird.write 4)
    mFirst.eq 1
    mThird.eq 3

# tests that bool.or stops calculations if its i'th
# object is true (including the base object)
[] > or-short-circuiting
  memory > mFirst
  memory > mThird
  and. > @
    or.
      mFirst.write 1
      mFirst.write 2
      mFirst.write 3
    or.
      (mThird.write 1).not
      (mThird.write 2).not
      mThird.write 3
      mThird.write 4
    mFirst.eq 1
    mThird.eq 3

[] > compares-bool-to-bytes
  and. > @
    TRUE.eq 01-
    FALSE.eq 00-

[] > compares-bool-to-string
  and. > @
    TRUE.eq "\001"
    FALSE.eq "\000"
